# Include{groups}
portals: {}
questions:
  - variable: portal
    group: "Container Image"
    label: "Configure Portal Button"
    schema:
      type: dict
      hidden: true
      attrs:
        - variable: enabled
          label: "Enable"
          description: "enable the portal button"
          schema:
            hidden: true
            editable: false
            type: boolean
            default: false
# Include{global}

  - variable: controller
    group: "Controller"
    label: ""
    schema:
      additional_attrs: true
      type: dict
      attrs:
        - variable: advanced
          label: "Show Advanced Controller Settings"
          schema:
            type: boolean
            default: false
            show_subquestions_if: true
            subquestions:
              - variable: type
                description: "Please specify type of workload to deploy"
                label: "(Advanced) Controller Type"
                schema:
                  type: string
                  default: "deployment"
                  required: true
                  enum:
                    - value: "deployment"
                      description: "Deployment"
                    - value: "statefulset"
                      description: "Statefulset"
                    - value: "daemonset"
                      description: "Daemonset"
              - variable: replicas
                description: "Number of desired pod replicas"
                label: "Desired Replicas"
                schema:
                  type: int
                  default: 1
                  required: true
              - variable: strategy
                description: "Please specify type of workload to deploy"
                label: "(Advanced) Update Strategy"
                schema:
                  type: string
                  default: "Recreate"
                  required: true
                  enum:
                    - value: "Recreate"
                      description: "Recreate: Kill existing pods before creating new ones"
                    - value: "RollingUpdate"
                      description: "RollingUpdate: Create new pods and then kill old ones"
                    - value: "OnDelete"
                      description: "(Legacy) OnDelete: ignore .spec.template changes"
# Include{controllerExpert}

  - variable: env
    group: "Container Configuration"
    label: "Image Environment"
    schema:
      additional_attrs: true
      type: dict
      attrs:

        - variable: AutoStart
          label: 'AutoStart'
          description: "true = Enabled  Runs script automatically on startup"
          schema:
            type: string
            default: ""
        - variable: ScriptInterval
          label: 'ScriptInterval'
          description: "#s or #m or #h or #d  s = seconds, m = minutes, h = hours, d = days  Amount of time between each script run, when AUTOSTART is enabled"
          schema:
            type: string
            default: ""
        - variable: DeDupe
          label: 'DeDupe'
          description: "true = Enabled  This setting further reduces the final ROMs list per platrom, by removing duplicates with the priority of USA  Europe  World  Japan, and then by shortest filename when multiples exist"
          schema:
            type: string
            default: ""
        - variable: AquireRomSets
          label: 'AquireRomSets'
          description: "true = Enabled  Enabling this will have the script attempt to pull valid ROM sets from archive.org for processing"
          schema:
            type: string
            default: ""
        - variable: ConcurrentDownloadThreads
          label: 'ConcurrentDownloadThreads'
          description: "Number of concurrent threads to increase download speed... only aplicable if AquireRomSets is enabled (true)"
          schema:
            type: string
            default: ""
        - variable: EnableUnsupportedPlatforms
          label: 'EnableUnsupportedPlatforms'
          description: "true = Enabled  Enabling this will allow the script to import and scrape ROMs for platforms without RA hashes, no dedupingvalidation is performed"
          schema:
            type: string
            default: ""
        - variable: ScrapeMetadata
          label: 'ScrapeMetadata'
          description: "true = Enabled  Enabling this will allow the script to process the ROMs with skyscraper"
          schema:
            type: string
            default: ""
        - variable: keepBackupsOfImportedRoms
          label: 'keepBackupsOfImportedRoms'
          description: "false = Enabled  This setting will only keep a single copy of each ROM, reduces the required amount of storage space..."
          schema:
            type: string
            default: ""
        - variable: skyscraperLanguagePreference
          label: 'skyscraperLanguagePreference'
          description: "Set to preferred language for Metadata, for more info visit httpsgithub.commuldjordskyscraperblobmasterdocsLANGUAGES.md#list-of-supported-languages"
          schema:
            type: string
            default: ""
        - variable: ScreenscraperUsername
          label: 'ScreenscraperUsername'
          description: "Username for httpsscreenscraper.fr"
          schema:
            type: string
            default: ""
        - variable: ScreenscraperPassword
          label: 'ScreenscraperPassword'
          description: "Password for httpsscreenscraper.fr"
          schema:
            type: string
            default: ""


  - variable: serviceexpert
    group: "Networking and Services"
    label: "Show Expert Config"
    schema:
      type: boolean
      default: false
      show_subquestions_if: true
      subquestions:
        - variable: hostNetwork
          group: "Networking and Services"
          label: "Host-Networking (Complicated)"
          schema:
            type: boolean
            default: false

# Include{serviceExpert}

# Include{serviceList}

  - variable: persistence
    label: "Integrated Persistent Storage"
    description: "Integrated Persistent Storage"
    group: "Storage and Persistence"
    schema:
      additional_attrs: true
      type: dict
      attrs:

        - variable: config
          label: "config Storage"
          description: "Container Path config"
          schema:
            additional_attrs: true
            type: dict
            attrs:
# Include{persistenceBasic}
# Include{persistenceAdvanced}
        - variable: hostpathforcache
          label: "hostpathforcache Storage"
          description: "cache location for skyscraper."
          schema:
            additional_attrs: true
            type: dict
            attrs:
# Include{persistenceBasic}
# Include{persistenceAdvanced}
        - variable: hostpathforinput
          label: "hostpathforinput Storage"
          description: " Place ROMs to be processed in this directory"
          schema:
            additional_attrs: true
            type: dict
            attrs:
# Include{persistenceBasic}
# Include{persistenceAdvanced}
        - variable: hostpathforoutput
          label: "hostpathforoutput Storage"
          description: "ROMs that have been processed will end up here"
          schema:
            additional_attrs: true
            type: dict
            attrs:
# Include{persistenceBasic}
# Include{persistenceAdvanced}
        - variable: hostpathforbackup
          label: "hostpathforbackup Storage"
          description: "Processed ROMs are backed up to this directory"
          schema:
            additional_attrs: true
            type: dict
            attrs:
# Include{persistenceBasic}
# Include{persistenceAdvanced}


# Include{persistenceList}


# Include{ingressList}

# Include{security}

  - variable: advancedSecurity
    label: "Show Advanced Security Settings"
    group: "Security and Permissions"
    schema:
      type: boolean
      default: false
      show_subquestions_if: true
      subquestions:
        - variable: securityContext
          label: "Security Context"
          schema:
            additional_attrs: true
            type: dict
            attrs:
              - variable: privileged
                label: "Privileged mode"
                schema:
                  type: boolean
                  default: false
              - variable: readOnlyRootFilesystem
                label: "ReadOnly Root Filesystem"
                schema:
                  type: boolean
                  default: false
              - variable: allowPrivilegeEscalation
                label: "Allow Privilege Escalation"
                schema:
                  type: boolean
                  default: false
              - variable: runAsNonRoot
                label: "runAsNonRoot"
                schema:
                  type: boolean
                  default: false
# Include{securityContextAdvanced}

  - variable: podSecurityContext
    group: "Security and Permissions"
    label: "Pod Security Context"
    schema:
      additional_attrs: true
      type: dict
      attrs:
        - variable: runAsUser
          label: "runAsUser"
          description: "The UserID of the user running the application"
          schema:
            type: int
            default: 0
        - variable: runAsGroup
          label: "runAsGroup"
          description: The groupID this App of the user running the application"
          schema:
            type: int
            default: 0
        - variable: fsGroup
          label: "fsGroup"
          description: "The group that should own ALL storage."
          schema:
            type: int
            default: 568
# Include{podSecurityContextAdvanced}


# Include{resources}

# Include{advanced}

# Include{addons}
