# Include{groups}
portals: {}
questions:
  - variable: portal
    group: "Container Image"
    label: "Configure Portal Button"
    schema:
      type: dict
      hidden: true
      attrs:
        - variable: enabled
          label: "Enable"
          description: "enable the portal button"
          schema:
            hidden: true
            editable: false
            type: boolean
            default: false
# Include{global}

  - variable: controller
    group: "Controller"
    label: ""
    schema:
      additional_attrs: true
      type: dict
      attrs:
        - variable: advanced
          label: "Show Advanced Controller Settings"
          schema:
            type: boolean
            default: false
            show_subquestions_if: true
            subquestions:
              - variable: type
                description: "Please specify type of workload to deploy"
                label: "(Advanced) Controller Type"
                schema:
                  type: string
                  default: "deployment"
                  required: true
                  enum:
                    - value: "deployment"
                      description: "Deployment"
                    - value: "statefulset"
                      description: "Statefulset"
                    - value: "daemonset"
                      description: "Daemonset"
              - variable: replicas
                description: "Number of desired pod replicas"
                label: "Desired Replicas"
                schema:
                  type: int
                  default: 1
                  required: true
              - variable: strategy
                description: "Please specify type of workload to deploy"
                label: "(Advanced) Update Strategy"
                schema:
                  type: string
                  default: "Recreate"
                  required: true
                  enum:
                    - value: "Recreate"
                      description: "Recreate: Kill existing pods before creating new ones"
                    - value: "RollingUpdate"
                      description: "RollingUpdate: Create new pods and then kill old ones"
                    - value: "OnDelete"
                      description: "(Legacy) OnDelete: ignore .spec.template changes"
# Include{controllerExpert}

  - variable: env
    group: "Container Configuration"
    label: "Image Environment"
    schema:
      additional_attrs: true
      type: dict
      attrs:

        - variable: WALLET_ADDRESS
          label: 'WALLET_ADDRESS'
          description: "Value should be changed to your Wallet address you use for payout."
          schema:
            type: string
            default: ""
        - variable: SHARE_SIZE
          label: 'SHARE_SIZE'
          description: "Example 500GB, 1TB, 8TB, for each node you start. MAX SIZE=8TB per node."
          schema:
            type: string
            default: "100GB"
        - variable: RPCADDRESS
          label: 'RPCADDRESS'
          description: "Your DynamicDNS or external DNS address here. If you need a DDNS service, a free one is duckdns.org"
          schema:
            type: string
            default: "0.0.0.0"
        - variable: STORJ_MONITOR_API_KEY
          label: 'STORJ_MONITOR_API_KEY'
          description: "API-Key for Storjstat.com."
          schema:
            type: string
            default: ""
        - variable: NODE_COUNT
          label: 'NODE_COUNT'
          description: "Storj daemon can run multiple farming nodes at once. The maximum number of nodes per container is number of threads the CPU has. "
          schema:
            type: string
            default: "0"
        - variable: NODE_DIR
          label: 'NODE_DIR'
          description: "For multiple nodes this builds your directory, example storjthisNameHere#"
          schema:
            type: string
            default: "Node_"
        - variable: TUNNELING_REQUIRED
          label: 'TUNNELING_REQUIRED'
          description: "TCP NAT tunnel onoff switch"
          schema:
            type: string
            default: "FALSE"
        - variable: DEL_LOGS
          label: 'DEL_LOGS'
          description: "Delete Storj logs onoff switch.Enable == TRUE"
          schema:
            type: string
            default: "FALSE"
        - variable: DEL_LOGS_DAYS
          label: 'DEL_LOGS_DAYS'
          description: "How many days worth of logs to keep. Deletes everything greater than."
          schema:
            type: string
            default: "7"


  - variable: serviceexpert
    group: "Networking and Services"
    label: "Show Expert Config"
    schema:
      type: boolean
      default: false
      show_subquestions_if: true
      subquestions:
        - variable: hostNetwork
          group: "Networking and Services"
          label: "Host-Networking (Complicated)"
          schema:
            type: boolean
            default: false

# Include{serviceExpert}

# Include{serviceList}

  - variable: persistence
    label: "Integrated Persistent Storage"
    description: "Integrated Persistent Storage"
    group: "Storage and Persistence"
    schema:
      additional_attrs: true
      type: dict
      attrs:

        - variable: pathofstorjshareonarray
          label: "pathofstorjshareonarray Storage"
          description: "Enter location of your storj share folder on TrueNAS host. "
          schema:
            additional_attrs: true
            type: dict
            attrs:
# Include{persistenceBasic}
# Include{persistenceAdvanced}


# Include{persistenceList}


# Include{ingressList}

# Include{security}

  - variable: advancedSecurity
    label: "Show Advanced Security Settings"
    group: "Security and Permissions"
    schema:
      type: boolean
      default: false
      show_subquestions_if: true
      subquestions:
        - variable: securityContext
          label: "Security Context"
          schema:
            additional_attrs: true
            type: dict
            attrs:
              - variable: privileged
                label: "Privileged mode"
                schema:
                  type: boolean
                  default: false
              - variable: readOnlyRootFilesystem
                label: "ReadOnly Root Filesystem"
                schema:
                  type: boolean
                  default: false
              - variable: allowPrivilegeEscalation
                label: "Allow Privilege Escalation"
                schema:
                  type: boolean
                  default: false
              - variable: runAsNonRoot
                label: "runAsNonRoot"
                schema:
                  type: boolean
                  default: false
# Include{securityContextAdvanced}

  - variable: podSecurityContext
    group: "Security and Permissions"
    label: "Pod Security Context"
    schema:
      additional_attrs: true
      type: dict
      attrs:
        - variable: runAsUser
          label: "runAsUser"
          description: "The UserID of the user running the application"
          schema:
            type: int
            default: 0
        - variable: runAsGroup
          label: "runAsGroup"
          description: The groupID this App of the user running the application"
          schema:
            type: int
            default: 0
        - variable: fsGroup
          label: "fsGroup"
          description: "The group that should own ALL storage."
          schema:
            type: int
            default: 568
# Include{podSecurityContextAdvanced}


# Include{resources}

# Include{advanced}

# Include{addons}
