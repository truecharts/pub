# Include{groups}
portals:
  open:
    protocols:
      - "$kubernetes-resource_configmap_portal_protocol"
    host:
      - "$kubernetes-resource_configmap_portal_host"
    ports:
      - "$kubernetes-resource_configmap_portal_port"
questions:
  - variable: portal
    group: "Container Image"
    label: "Configure Portal Button"
    schema:
      type: dict
      hidden: true
      attrs:
        - variable: enabled
          label: "Enable"
          description: "enable the portal button"
          schema:
            hidden: true
            editable: false
            type: boolean
            default: true
# Include{global}

  - variable: controller
    group: "Controller"
    label: ""
    schema:
      additional_attrs: true
      type: dict
      attrs:
        - variable: advanced
          label: "Show Advanced Controller Settings"
          schema:
            type: boolean
            default: false
            show_subquestions_if: true
            subquestions:
              - variable: type
                description: "Please specify type of workload to deploy"
                label: "(Advanced) Controller Type"
                schema:
                  type: string
                  default: "deployment"
                  required: true
                  enum:
                    - value: "deployment"
                      description: "Deployment"
                    - value: "statefulset"
                      description: "Statefulset"
                    - value: "daemonset"
                      description: "Daemonset"
              - variable: replicas
                description: "Number of desired pod replicas"
                label: "Desired Replicas"
                schema:
                  type: int
                  default: 1
                  required: true
              - variable: strategy
                description: "Please specify type of workload to deploy"
                label: "(Advanced) Update Strategy"
                schema:
                  type: string
                  default: "Recreate"
                  required: true
                  enum:
                    - value: "Recreate"
                      description: "Recreate: Kill existing pods before creating new ones"
                    - value: "RollingUpdate"
                      description: "RollingUpdate: Create new pods and then kill old ones"
                    - value: "OnDelete"
                      description: "(Legacy) OnDelete: ignore .spec.template changes"
# Include{controllerExpert}

  - variable: env
    group: "Container Configuration"
    label: "Image Environment"
    schema:
      additional_attrs: true
      type: dict
      attrs:

        - variable: ENABLE_AUTH
          label: 'ENABLE_AUTH'
          description: "Enable authentication 0 OR 1"
          schema:
            type: string
            default: "1"
        - variable: ENABLE_GUESTS
          label: 'ENABLE_GUESTS'
          description: "Enable guest access 0 OR 1"
          schema:
            type: string
            default: "1"
        - variable: ENABLE_LETSENCRYPT
          label: 'ENABLE_LETSENCRYPT'
          description: "Enable Lets Encrypt certificate generation 0 OR 1"
          schema:
            type: string
            default: "1"
        - variable: ENABLE_HTTP_REDIRECT
          label: 'ENABLE_HTTP_REDIRECT'
          description: "Redirect HTTP traffic to HTTPS (necessary for Lets Encrypt) 0 OR 1"
          schema:
            type: string
            default: "1"
        - variable: ENABLE_TRANSCRIPTIONS
          label: 'ENABLE_TRANSCRIPTIONS'
          description: "Enable Jigasi transcription in a conference"
          schema:
            type: string
            default: "1"
        - variable: DISABLE_HTTPS
          label: 'DISABLE_HTTPS'
          description: "Handle TLS connections outside of this setup"
          schema:
            type: string
            default: "1"
        - variable: JICOFO_AUTH_USER
          label: 'JICOFO_AUTH_USER'
          description: "XMPP user for Jicofo client connections"
          schema:
            type: string
            default: "focus"
        - variable: LETSENCRYPT_DOMAIN
          label: 'LETSENCRYPT_DOMAIN'
          description: "Domain for which to generate the certificate"
          schema:
            type: string
            default: "meet.example.com"
        - variable: LETSENCRYPT_EMAIL
          label: 'LETSENCRYPT_EMAIL'
          description: "E-Mail for receiving important account notifications (mandatory) 	"
          schema:
            type: string
            default: "user@example.com"
        - variable: PUBLIC_URL
          label: 'PUBLIC_URL'
          description: "Public URL for the web service"
          schema:
            type: string
            default: "https://meet.example.com"
        - variable: XMPP_DOMAIN
          label: 'XMPP_DOMAIN'
          description: "Internal XMPP domain"
          schema:
            type: string
            default: "meet.jitsi"
        - variable: XMPP_BOSH_URL_BASE
          label: 'XMPP_BOSH_URL_BASE'
          description: "Internal XMPP server URL for BOSH module"
          schema:
            type: string
            default: "http://xmpp.meet.jitsi:5280"
        - variable: XMPP_GUEST_DOMAIN
          label: 'XMPP_GUEST_DOMAIN'
          description: "XMPP domain for unauthenticated users"
          schema:
            type: string
            default: "guest.meet.jitsi"
        - variable: XMPP_MUC_DOMAIN
          label: 'XMPP_MUC_DOMAIN'
          description: "XMPP domain for the MUC"
          schema:
            type: string
            default: "muc.meet.jitsi"
        - variable: XMPP_RECORDER_DOMAIN
          label: 'XMPP_RECORDER_DOMAIN'
          description: "Domain for the jibri recorder"
          schema:
            type: string
            default: "recorder.meet.jitsi"
        - variable: ETHERPAD_URL_BASE
          label: 'ETHERPAD_URL_BASE'
          description: "Set etherpad-lite URL"
          schema:
            type: string
            default: "http://etherpad.meet.jitsi:9001"
        - variable: JIBRI_BREWERY_MUC
          label: 'JIBRI_BREWERY_MUC'
          description: "MUC name for the Jibri pool"
          schema:
            type: string
            default: "jibribrewery"
        - variable: JIBRI_PENDING_TIMEOUT
          label: 'JIBRI_PENDING_TIMEOUT'
          description: "MUC connection timeout"
          schema:
            type: string
            default: "90"
        - variable: JIBRI_XMPP_USER
          label: 'JIBRI_XMPP_USER'
          description: "Internal user for Jibri client connections."
          schema:
            type: string
            default: "jibri"
        - variable: JIBRI_XMPP_PASSWORD
          label: 'JIBRI_XMPP_PASSWORD'
          description: "Internal password for Jibri client connections."
          schema:
            type: string
            default: "passw0rd"
        - variable: JIBRI_RECORDER_USER
          label: 'JIBRI_RECORDER_USER'
          description: "Internal recorder user for Jibri client connections"
          schema:
            type: string
            default: "recorder"
        - variable: JIBRI_RECORDER_PASSWORD
          label: 'JIBRI_RECORDER_PASSWORD'
          description: "Internal recorder password for Jibri client connections"
          schema:
            type: string
            default: "passw0rd"
        - variable: ENABLE_RECORDING
          label: 'ENABLE_RECORDING'
          description: "Enable recording conference to local disk"
          schema:
            type: string
            default: "1"

# Include{containerConfig}

  - variable: service
    group: "Networking and Services"
    label: "Configure Service(s)"
    schema:
      additional_attrs: true
      type: dict
      attrs:
        - variable: main
          label: "Main Service"
          description: "The Primary service on which the healthcheck runs, often the webUI"
          schema:
            additional_attrs: true
            type: dict
            attrs:
# Include{serviceSelector}
                    - variable: main
                      label: "Main Service Port Configuration"
                      schema:
                        additional_attrs: true
                        type: dict
                        attrs:
                          - variable: port
                            label: "Port"
                            description: "This port exposes the container port on the service"
                            schema:
                              type: int
                              default: 8000
                              required: true
                          - variable: advanced
                            label: "Show Advanced settings"
                            schema:
                              type: boolean
                              default: false
                              show_subquestions_if: true
                              subquestions:
                                - variable: protocol
                                  label: "Port Type"
                                  schema:
                                    type: string
                                    default: HTTP
                                    enum:
                                      - value: HTTP
                                        description: "HTTP"
                                      - value: "HTTPS"
                                        description: "HTTPS"
                                      - value: TCP
                                        description: "TCP"
                                      - value: "UDP"
                                        description: "UDP"
                                - variable: nodePort
                                  label: "Node Port (Optional)"
                                  description: "This port gets exposed to the node. Only considered when service type is NodePort, Simple or LoadBalancer"
                                  schema:
                                    type: int
                                    min: 9000
                                    max: 65535
                                - variable: targetPort
                                  label: "Target Port"
                                  description: "The internal(!) port on the container the Application runs on"
                                  schema:
                                    type: int
                                    default: 80

        - variable: https
          label: 'https service'
          description: "HTTPS"
          schema:
            additional_attrs: true
            type: dict
            attrs:
# Include{serviceSelector}
                    - variable: https
                      label: "https Service Port Configuration"
                      schema:
                        additional_attrs: true
                        type: dict
                        attrs:
                          - variable: port
                            label: "Port"
                            description: "This port exposes the container port on the service"
                            schema:
                              type: int
                              default: 4443
                              required: true
                          - variable: advanced
                            label: "Show Advanced settings"
                            schema:
                              type: boolean
                              default: false
                              show_subquestions_if: true
                              subquestions:
                                - variable: enabled
                                  label: "Enable the port"
                                  schema:
                                    type: boolean
                                    default: true
                                - variable: protocol
                                  label: "Port Type"
                                  schema:
                                    type: string
                                    default: TCP
                                    enum:
                                      - value: HTTP
                                        description: "HTTP"
                                      - value: "HTTPS"
                                        description: "HTTPS"
                                      - value: TCP
                                        description: "TCP"
                                      - value: "UDP"
                                        description: "UDP"
                                - variable: nodePort
                                  label: "Node Port (Optional)"
                                  description: "This port gets exposed to the node. Only considered when service type is NodePort, Simple or LoadBalancer"
                                  schema:
                                    type: int
                                    min: 9000
                                    max: 65535
                                - variable: targetPort
                                  label: "Target Port"
                                  description: "The internal(!) port on the container the Application runs on"
                                  schema:
                                    type: int
                                    default: 443


  - variable: serviceexpert
    group: "Networking and Services"
    label: "Show Expert Config"
    schema:
      type: boolean
      default: false
      show_subquestions_if: true
      subquestions:
        - variable: hostNetwork
          group: "Networking and Services"
          label: "Host-Networking (Complicated)"
          schema:
            type: boolean
            default: false

# Include{serviceExpert}

# Include{serviceList}

  - variable: persistence
    label: "Integrated Persistent Storage"
    description: "Integrated Persistent Storage"
    group: "Storage and Persistence"
    schema:
      additional_attrs: true
      type: dict
      attrs:

        - variable: config
          label: "config Storage"
          description: "IMPORTENT Change to mntuserappdatajitsiweb"
          schema:
            additional_attrs: true
            type: dict
            attrs:
# Include{persistenceBasic}
# Include{persistenceAdvanced}
        - variable: letsencrypt
          label: "letsencrypt Storage"
          description: "Container Path etcletsencrypt"
          schema:
            additional_attrs: true
            type: dict
            attrs:
# Include{persistenceBasic}
# Include{persistenceAdvanced}
        - variable: transcripts
          label: "transcripts Storage"
          description: "Container Path usrsharejitsi-meettranscripts"
          schema:
            additional_attrs: true
            type: dict
            attrs:
# Include{persistenceBasic}
# Include{persistenceAdvanced}


# Include{persistenceList}


  - variable: ingress
    label: ""
    group: "Ingress"
    schema:
      additional_attrs: true
      type: dict
      attrs:
        - variable: main
          label: "Main Ingress"
          schema:
            additional_attrs: true
            type: dict
            attrs:
# Include{ingressDefault}

# Include{ingressTLS}

# Include{ingressTraefik}

# Include{ingressExpert}

# Include{ingressList}

# Include{security}

  - variable: advancedSecurity
    label: "Show Advanced Security Settings"
    group: "Security and Permissions"
    schema:
      type: boolean
      default: false
      show_subquestions_if: true
      subquestions:
        - variable: securityContext
          label: "Security Context"
          schema:
            additional_attrs: true
            type: dict
            attrs:
              - variable: privileged
                label: "Privileged mode"
                schema:
                  type: boolean
                  default: false
              - variable: readOnlyRootFilesystem
                label: "ReadOnly Root Filesystem"
                schema:
                  type: boolean
                  default: false
              - variable: allowPrivilegeEscalation
                label: "Allow Privilege Escalation"
                schema:
                  type: boolean
                  default: false
              - variable: runAsNonRoot
                label: "runAsNonRoot"
                schema:
                  type: boolean
                  default: false
# Include{securityContextAdvanced}

  - variable: podSecurityContext
    group: "Security and Permissions"
    label: "Pod Security Context"
    schema:
      additional_attrs: true
      type: dict
      attrs:
        - variable: runAsUser
          label: "runAsUser"
          description: "The UserID of the user running the application"
          schema:
            type: int
            default: 0
        - variable: runAsGroup
          label: "runAsGroup"
          description: The groupID this App of the user running the application"
          schema:
            type: int
            default: 0
        - variable: fsGroup
          label: "fsGroup"
          description: "The group that should own ALL storage."
          schema:
            type: int
            default: 568
# Include{podSecurityContextAdvanced}


# Include{resources}

# Include{advanced}

# Include{addons}
