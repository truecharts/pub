# Include{groups}
portals:
  open:
    protocols:
      - "$kubernetes-resource_configmap_portal_protocol"
    host:
      - "$kubernetes-resource_configmap_portal_host"
    ports:
      - "$kubernetes-resource_configmap_portal_port"
questions:
  - variable: portal
    group: "Container Image"
    label: "Configure Portal Button"
    schema:
      type: dict
      hidden: true
      attrs:
        - variable: enabled
          label: "Enable"
          description: "enable the portal button"
          schema:
            hidden: true
            editable: false
            type: boolean
            default: true
# Include{global}

  - variable: controller
    group: "Controller"
    label: ""
    schema:
      additional_attrs: true
      type: dict
      attrs:
        - variable: advanced
          label: "Show Advanced Controller Settings"
          schema:
            type: boolean
            default: false
            show_subquestions_if: true
            subquestions:
              - variable: type
                description: "Please specify type of workload to deploy"
                label: "(Advanced) Controller Type"
                schema:
                  type: string
                  default: "deployment"
                  required: true
                  enum:
                    - value: "deployment"
                      description: "Deployment"
                    - value: "statefulset"
                      description: "Statefulset"
                    - value: "daemonset"
                      description: "Daemonset"
              - variable: replicas
                description: "Number of desired pod replicas"
                label: "Desired Replicas"
                schema:
                  type: int
                  default: 1
                  required: true
              - variable: strategy
                description: "Please specify type of workload to deploy"
                label: "(Advanced) Update Strategy"
                schema:
                  type: string
                  default: "Recreate"
                  required: true
                  enum:
                    - value: "Recreate"
                      description: "Recreate: Kill existing pods before creating new ones"
                    - value: "RollingUpdate"
                      description: "RollingUpdate: Create new pods and then kill old ones"
                    - value: "OnDelete"
                      description: "(Legacy) OnDelete: ignore .spec.template changes"
# Include{controllerExpert}

  - variable: env
    group: "Container Configuration"
    label: "Image Environment"
    schema:
      additional_attrs: true
      type: dict
      attrs:

        - variable: autoStart
          label: 'autoStart'
          description: "true = Enabled  Runs script automatically on startup"
          schema:
            type: string
            default: ""
        - variable: configureLidarrWithOptimalSettings
          label: 'configureLidarrWithOptimalSettings'
          description: "true = enabled  Automatically configures Lidarr with optimal settings"
          schema:
            type: string
            default: ""
        - variable: searchSort
          label: 'searchSort'
          description: "date or ablum  Sorts the missingcutoff list by release date (newest - oldest) or album type (album - single) for processing the list"
          schema:
            type: string
            default: ""
        - variable: dlClientSource
          label: 'dlClientSource'
          description: "deezer, tidal or both  set to both, to use both clients, tidal requires extra steps, view logging output"
          schema:
            type: string
            default: ""
        - variable: arlToken
          label: 'arlToken'
          description: "User token for deemix client"
          schema:
            type: string
            default: ""
        - variable: tidalCountryCode
          label: 'tidalCountryCode'
          description: "Country Code for Tidal API data"
          schema:
            type: string
            default: ""
        - variable: audioFormat
          label: 'audioFormat'
          description: "native or alac or mp3 or aac or opus  native is the native download client file type, selected by the matching audio bitrate"
          schema:
            type: string
            default: ""
        - variable: audioBitrate
          label: 'audioBitrate'
          description: "lossless or high or low or ###  lossless = flac files, high = 320K, low = 128k96k, ### = the output bitrate of converted lossless files to selected audioFormat that is not native, example 192..."
          schema:
            type: string
            default: ""
        - variable: requireQuality
          label: 'requireQuality'
          description: "true = enabled  Downloads will be required to have the requested file format"
          schema:
            type: string
            default: ""
        - variable: enableBeetsTagging
          label: 'enableBeetsTagging'
          description: "true = enabled  Downloads will be processed and tagged by Beets"
          schema:
            type: string
            default: ""
        - variable: enableReplaygainTags
          label: 'enableReplaygainTags'
          description: "true = enabled  Downloads will be tagged with Replaygain Metadata"
          schema:
            type: string
            default: ""
        - variable: audioLyricType
          label: 'audioLyricType'
          description: "both or explicit or clean  both, is explicit perferred matching, explicit is explicit releases only matching and clean is clean releases only matching"
          schema:
            type: string
            default: ""
        - variable: addDeezerTopArtists
          label: 'addDeezerTopArtists'
          description: "true = enabled  Enabling this will enable the extended script to automatically add artists that are on the Deezer Top Artist Chart to your existing Lidarr instance"
          schema:
            type: string
            default: ""
        - variable: addDeezerTopAlbumArtists
          label: 'addDeezerTopAlbumArtists'
          description: "true = enabled  Enabling this will enable the extended script to automatically add artists that are on the Deezer Top Ablum Chart to your existing Lidarr instance"
          schema:
            type: string
            default: ""
        - variable: addDeezerTopTrackArtists
          label: 'addDeezerTopTrackArtists'
          description: "true = enabled  Enabling this will enable the extended script to automatically add artists that are on the Deezer Top Track Chart to your existing Lidarr instance"
          schema:
            type: string
            default: ""
        - variable: topLimit
          label: 'topLimit'
          description: "This setting controls the amount of Top Artist (AlbumsTracksArtists) to add to Lidarr from Deezer"
          schema:
            type: string
            default: ""
        - variable: addRelatedArtists
          label: 'addRelatedArtists'
          description: "true = enabled  WARNING !!! WARNING !!! Enabling this can cause an endless loop of additional artists.... Enabling this will enable the extended script to automatically add artists that are related to your existing Lidarr artists from Deezer"
          schema:
            type: string
            default: ""
        - variable: numberOfRelatedArtistsToAddPerArtist
          label: 'numberOfRelatedArtistsToAddPerArtist'
          description: "1-20  This will limit the number of related artists to add per artist in your library  Minimum is 1, Maximum is 20"
          schema:
            type: string
            default: ""
        - variable: beetsMatchPercentage
          label: 'beetsMatchPercentage'
          description: "1-100  Set this to the minimum percentage required for Beets to match the downloaded album to a musicbrainz release  Lower percentage is less restrictive"
          schema:
            type: string
            default: ""
        - variable: plexUrl
          label: 'plexUrl'
          description: "ONLY used if PlexNotify.bash is used..."
          schema:
            type: string
            default: ""
        - variable: plexToken
          label: 'plexToken'
          description: "ONLY used if PlexNotify.bash is used..."
          schema:
            type: string
            default: ""

# Include{containerConfig}

  - variable: service
    group: "Networking and Services"
    label: "Configure Service(s)"
    schema:
      additional_attrs: true
      type: dict
      attrs:
        - variable: main
          label: "Main Service"
          description: "The Primary service on which the healthcheck runs, often the webUI"
          schema:
            additional_attrs: true
            type: dict
            attrs:
# Include{serviceSelector}
                    - variable: main
                      label: "Main Service Port Configuration"
                      schema:
                        additional_attrs: true
                        type: dict
                        attrs:
                          - variable: port
                            label: "Port"
                            description: "This port exposes the container port on the service"
                            schema:
                              type: int
                              default: 8686
                              required: true
                          - variable: advanced
                            label: "Show Advanced settings"
                            schema:
                              type: boolean
                              default: false
                              show_subquestions_if: true
                              subquestions:
                                - variable: protocol
                                  label: "Port Type"
                                  schema:
                                    type: string
                                    default: TCP
                                    enum:
                                      - value: HTTP
                                        description: "HTTP"
                                      - value: "HTTPS"
                                        description: "HTTPS"
                                      - value: TCP
                                        description: "TCP"
                                      - value: "UDP"
                                        description: "UDP"
                                - variable: nodePort
                                  label: "Node Port (Optional)"
                                  description: "This port gets exposed to the node. Only considered when service type is NodePort, Simple or LoadBalancer"
                                  schema:
                                    type: int
                                    min: 9000
                                    max: 65535
                                - variable: targetPort
                                  label: "Target Port"
                                  description: "The internal(!) port on the container the Application runs on"
                                  schema:
                                    type: int
                                    default: 8686



  - variable: serviceexpert
    group: "Networking and Services"
    label: "Show Expert Config"
    schema:
      type: boolean
      default: false
      show_subquestions_if: true
      subquestions:
        - variable: hostNetwork
          group: "Networking and Services"
          label: "Host-Networking (Complicated)"
          schema:
            type: boolean
            default: false

# Include{serviceExpert}

# Include{serviceList}

  - variable: persistence
    label: "Integrated Persistent Storage"
    description: "Integrated Persistent Storage"
    group: "Storage and Persistence"
    schema:
      additional_attrs: true
      type: dict
      attrs:

        - variable: config
          label: "config Storage"
          description: "Container Path config"
          schema:
            additional_attrs: true
            type: dict
            attrs:
              - variable: type
                label: "Type of Storage"
                description: "Sets the persistence type, Anything other than PVC could break rollback!"
                schema:
                  type: string
                  default: "simplePVC"
                  enum:
                    - value: "simplePVC"
                      description: "PVC (simple)"
                    - value: "simpleHP"
                      description: "HostPath (simple)"
                    - value: "emptyDir"
                      description: "emptyDir"
                    - value: "pvc"
                      description: "pvc"
                    - value: "hostPath"
                      description: "hostPath"
# Include{persistenceBasic}
              - variable: hostPath
                label: "hostPath"
                description: "Path inside the container the storage is mounted"
                schema:
                  show_if: [["type", "=", "hostPath"]]
                  type: hostpath
              - variable: medium
                label: "EmptyDir Medium"
                schema:
                  show_if: [["type", "=", "emptyDir"]]
                  type: string
                  default: ""
                  enum:
                    - value: ""
                      description: "Default"
                    - value: "Memory"
                      description: "Memory"
# Include{persistenceAdvanced}
        - variable: hostpathfordownloads-lidarr-extended
          label: "hostpathfordownloads-lidarr-extended Storage"
          description: "Container Path downloads-lidarr-extended"
          schema:
            additional_attrs: true
            type: dict
            attrs:
              - variable: type
                label: "Type of Storage"
                description: "Sets the persistence type, Anything other than PVC could break rollback!"
                schema:
                  type: string
                  default: "simplePVC"
                  enum:
                    - value: "simplePVC"
                      description: "PVC (simple)"
                    - value: "simpleHP"
                      description: "HostPath (simple)"
                    - value: "emptyDir"
                      description: "emptyDir"
                    - value: "pvc"
                      description: "pvc"
                    - value: "hostPath"
                      description: "hostPath"
# Include{persistenceBasic}
              - variable: hostPath
                label: "hostPath"
                description: "Path inside the container the storage is mounted"
                schema:
                  show_if: [["type", "=", "hostPath"]]
                  type: hostpath
              - variable: medium
                label: "EmptyDir Medium"
                schema:
                  show_if: [["type", "=", "emptyDir"]]
                  type: string
                  default: ""
                  enum:
                    - value: ""
                      description: "Default"
                    - value: "Memory"
                      description: "Memory"
# Include{persistenceAdvanced}
        - variable: hostpathformusic
          label: "hostpathformusic Storage"
          description: "Container Path music"
          schema:
            additional_attrs: true
            type: dict
            attrs:
              - variable: type
                label: "Type of Storage"
                description: "Sets the persistence type, Anything other than PVC could break rollback!"
                schema:
                  type: string
                  default: "simplePVC"
                  enum:
                    - value: "simplePVC"
                      description: "PVC (simple)"
                    - value: "simpleHP"
                      description: "HostPath (simple)"
                    - value: "emptyDir"
                      description: "emptyDir"
                    - value: "pvc"
                      description: "pvc"
                    - value: "hostPath"
                      description: "hostPath"
# Include{persistenceBasic}
              - variable: hostPath
                label: "hostPath"
                description: "Path inside the container the storage is mounted"
                schema:
                  show_if: [["type", "=", "hostPath"]]
                  type: hostpath
              - variable: medium
                label: "EmptyDir Medium"
                schema:
                  show_if: [["type", "=", "emptyDir"]]
                  type: string
                  default: ""
                  enum:
                    - value: ""
                      description: "Default"
                    - value: "Memory"
                      description: "Memory"
# Include{persistenceAdvanced}
        - variable: hostpathformusic-videos
          label: "hostpathformusic-videos Storage"
          description: "Container Path music-videos"
          schema:
            additional_attrs: true
            type: dict
            attrs:
              - variable: type
                label: "Type of Storage"
                description: "Sets the persistence type, Anything other than PVC could break rollback!"
                schema:
                  type: string
                  default: "simplePVC"
                  enum:
                    - value: "simplePVC"
                      description: "PVC (simple)"
                    - value: "simpleHP"
                      description: "HostPath (simple)"
                    - value: "emptyDir"
                      description: "emptyDir"
                    - value: "pvc"
                      description: "pvc"
                    - value: "hostPath"
                      description: "hostPath"
# Include{persistenceBasic}
              - variable: hostPath
                label: "hostPath"
                description: "Path inside the container the storage is mounted"
                schema:
                  show_if: [["type", "=", "hostPath"]]
                  type: hostpath
              - variable: medium
                label: "EmptyDir Medium"
                schema:
                  show_if: [["type", "=", "emptyDir"]]
                  type: string
                  default: ""
                  enum:
                    - value: ""
                      description: "Default"
                    - value: "Memory"
                      description: "Memory"
# Include{persistenceAdvanced}


# Include{persistenceList}


  - variable: ingress
    label: ""
    group: "Ingress"
    schema:
      additional_attrs: true
      type: dict
      attrs:
        - variable: main
          label: "Main Ingress"
          schema:
            additional_attrs: true
            type: dict
            attrs:
# Include{ingressDefault}

# Include{ingressTLS}

# Include{ingressTraefik}

# Include{ingressExpert}

# Include{ingressList}

# Include{security}

  - variable: advancedSecurity
    label: "Show Advanced Security Settings"
    group: "Security and Permissions"
    schema:
      type: boolean
      default: false
      show_subquestions_if: true
      subquestions:
        - variable: securityContext
          label: "Security Context"
          schema:
            additional_attrs: true
            type: dict
            attrs:
              - variable: privileged
                label: "Privileged mode"
                schema:
                  type: boolean
                  default: false
              - variable: readOnlyRootFilesystem
                label: "ReadOnly Root Filesystem"
                schema:
                  type: boolean
                  default: false
              - variable: allowPrivilegeEscalation
                label: "Allow Privilege Escalation"
                schema:
                  type: boolean
                  default: false
              - variable: runAsNonRoot
                label: "runAsNonRoot"
                schema:
                  type: boolean
                  default: false
# Include{securityContextAdvanced}

  - variable: podSecurityContext
    group: "Security and Permissions"
    label: "Pod Security Context"
    schema:
      additional_attrs: true
      type: dict
      attrs:
        - variable: runAsUser
          label: "runAsUser"
          description: "The UserID of the user running the application"
          schema:
            type: int
            default: 0
        - variable: runAsGroup
          label: "runAsGroup"
          description: The groupID this App of the user running the application"
          schema:
            type: int
            default: 0
        - variable: fsGroup
          label: "fsGroup"
          description: "The group that should own ALL storage."
          schema:
            type: int
            default: 568
# Include{podSecurityContextAdvanced}


# Include{resources}

# Include{advanced}

# Include{addons}
